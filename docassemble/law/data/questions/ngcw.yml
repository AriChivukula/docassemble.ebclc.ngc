---
modules:
	- docassemble.base.util
---
mandatory: True
code: |
	define("Today", today())
---
initial: True
code: |
  import datetime
  import types
  class FalseBoolean(object):
    def primitive_value(self):
      return False
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return False
    def logical_and(self, arg):
      return self
    def logical_or(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (TrueBoolean() if arg.__nonzero__() else self)
    def logical_not(self):
      return TrueBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else TrueBoolean())
  class TrueBoolean(object):
    def primitive_value(self):
      return True
    def is_undefined(self):
      return False
    def __nonzero__(self):
      return True
    def logical_and(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
    def logical_or(self, arg):
      return self
    def logical_not(self):
      return FalseBoolean()
    def logical_equals(self, arg):
      if arg.is_undefined():
        return Undefined()
      else:
        return (self if arg.__nonzero__() else FalseBoolean())
  class Undefined(object):
    def is_undefined(self):
      return True
    def __nonzero__(self):
      return False
    def primitive_value(self):
      return False
    def logical_and(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (self if arg.__nonzero__() else augment(False))
    def logical_or(self, arg):
      if arg.is_undefined():
        return self
      else:
        return (augment(True) if arg.__nonzero__() else self)
    def logical_not(self):
      return self
    def logical_equals(self, arg):
      return self
    def all_true(self):
      return self
    def all_false(self):
      return self
    def any_true(self):
      return self
    def all_false(self):
      return self
    def __add__(self, other):
      return self
    def __mul__(self, other):
      return self
    def __sub__(self, other):
      return self
    def __div__(self, other):
      return self
    def __eq__(self, other):
      return self
    def __lt__(self, other):
      return self
    def __le__(self, other):
      return self
    def __gt__(self, other):
      return self
    def __ge__(self, other):
      return self
    def __ne__(self, other):
      return self
    def __len__(self):
      return self
  class Datetime(datetime.datetime):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.datetime(self.year, self.month, self.day, self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Time(datetime.time):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return datetime.time(self.hour, self.minute, self.second, self.microsecond, self.tzinfo)
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Float(float):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return float(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class Integer(int):
    def is_undefined(self):
      return False
    def primitive_value(self):
      return int(self)
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __mul__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() * (other.primitive_value()))
    def __sub__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() - (other.primitive_value()))
    def __div__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() / (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == other.primitive_value())
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < other.primitive_value())
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= other.primitive_value())
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > other.primitive_value())
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= other.primitive_value())
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != other.primitive_value())
  class String(object):
    def __init__(self, string):
      self.string = string
    def is_undefined(self):
      return False
    def primitive_value(self):
      return self.string
    def __len__(self):
      return Integer(self.primitive_value().__len__())
    def __add__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() + (other.primitive_value()))
    def __eq__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() == (other.primitive_value()))
    def __lt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() < (other.primitive_value()))
    def __le__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() <= (other.primitive_value()))
    def __gt__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() > (other.primitive_value()))
    def __ge__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() >= (other.primitive_value()))
    def __ne__(self, other):
      if other.is_undefined():
        return other
      else:
        return augment(self.primitive_value() != (other.primitive_value()))
  class Dictionary(object):
    def __init__(self, da_dict):
      self.da_dict = da_dict
    def is_undefined(self):
      return False
    def primitive_value(self):
      return self.da_dict
    def all_true(self):
      return augment(self.da_dict.all_true())
    def all_false(self):
      return augment(self.da_dict.all_false())
    def any_true(self):
      return augment(self.da_dict.any_true())
    def any_false(self):
      return augment(self.da_dict.any_false())
    def __str__(self):
      return unicode(self.da_dict)
  def augment(something):
    string_type = type('a')
    bool_type = type(True)
    integer_type = type(1)
    float_type = type(1.0)
    time_type = type(datetime.time())
    datetime_type = type(datetime.datetime(1, 1, 1))
    my_type = type(something)
    alt_type = something.__class__.__name__
    if(my_type == string_type or alt_type == 'unicode'):
      return String(something)
    elif(my_type == bool_type):
      if(something == True):
        return TrueBoolean()
      else:
        return FalseBoolean()
    elif(my_type == integer_type or alt_type == 'int'):
      return Integer(something)
    elif(my_type == float_type or alt_type == 'float'):
      return Float(something)
    elif(my_type == time_type):
      return Time(something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(my_type == datetime_type or alt_type == 'DADateTime'):
      return Datetime(something.year, something.month, something.day, something.hour, something.minute, something.second, something.microsecond, something.tzinfo)
    elif(alt_type == 'DADict'):
      return Dictionary(something)
    raise Exception("Couldn't augment because type() is " + unicode(my_type) + " and alt type is " + alt_type + " and argument was " + unicode(something))
  def ternary(condition, true_value, false_value):
    if type(condition) == type(Undefined()):
      return Undefined()
    elif condition:
      return true_value
    else:
      return false_value
---
initial: True
code: |
  import re
  from bs4 import BeautifulSoup
  from markdown import markdown

  def markdown_to_plaintext(markdown_string):
    html = markdown(markdown_string)
    html = re.sub(r'<pre>(.*?)</pre>', ' ', html)
    html = re.sub(r'<code>(.*?)</code >', ' ', html)
    soup = BeautifulSoup(html, "html.parser")
    text = ''.join(soup.findAll(text=True))
    return text
---
mandatory: True
code: |
	def ___define_until_idempotent():
		original_dict = all_variables()
		___define_all()
		if all_variables() != original_dict:
			re_run_logic()
	def ___define_all():
		vars = all_variables()

		if ((not ("___shortcut_2_false" in vars)) and (("start" in vars))):
			define("___shortcut_2_false", ((((augment(start) if ("start" in vars) else Undefined()).logical_equals(augment(False))).primitive_value())))
---
initial: True
code: |
	___define_until_idempotent()
---
code: |
	___shortcut_2_false = (start == False)
---
mandatory: True
code: |
	def passive_possible_variables():
		return { 'Today': (raw(Today) if defined("Today") else ''), 'start': (raw(start) if defined("start") else ''), '___shortcut_2_false': (raw(___shortcut_2_false) if defined("___shortcut_2_false") else '') }
---
features:
	debug: False
	inverse navbar: False
---
metadata:
	title: |
		Name & Gender Change Workshop
---
mandatory: |
	True
question: |
		<img style='margin-top:-32px;max-width:250px;height:80px' src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBckVTIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--e9d646ab9874748ad6b9e4bc7c5c96097998079f/c0f9eb7ede1f3e0d7b96b0449e183986-rimg-w720-h373-gmir.jpg'/>
subquestion: |
	# **_[THIS IS CODE, NOT LEGAL ADVICE](https://github.com/AriChivukula/docassemble.law/blob/master/docassemble/law/data/questions/icop.yml)_**
field: start

under: |

	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
	${___send_answers()}
---
mandatory: |
	True
question: |
		<img style='margin-top:-32px;max-width:250px;height:80px' src='https://community.lawyer/rails/active_storage/blobs/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaHBBckVTIiwiZXhwIjpudWxsLCJwdXIiOiJibG9iX2lkIn19--e9d646ab9874748ad6b9e4bc7c5c96097998079f/c0f9eb7ede1f3e0d7b96b0449e183986-rimg-w720-h373-gmir.jpg'/>
subquestion: |
	# **Thanks for volunteering!**

attachment code: |
	filter(bool, [___name_and_gender_change_pdf_1040_attachment_1204, ___name_change_pdf_1039_attachment_1203, ___gender_change_pdf_1041_attachment_1205, ___fee_waiver_pdf_1042_attachment_1206])
allow emailing: False
under: |

	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
	${___send_answers()}
---
code: |
	if True:
		import requests
		import json
		import time
		template_id = 1042
		access_key = 'UggzHZIZHg'
		drawn_variables = {}
		post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables }
		fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
		task_id = fill_response.get('task_id')
		filled_attachment_url = ""
		done = False
		pdf_attempts = 0
		while not done and pdf_attempts < 250:
			task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
			done = task_response.get('status') == 'done'
			filled_attachment_url = task_response.get('document')
			pdf_attempts += 1
			time.sleep(.2)
		___fee_waiver_pdf_1042_attachment_1206 = DAFileCollection()
		___fee_waiver_pdf_1042_attachment_1206.pdf = DAFile()
		___fee_waiver_pdf_1042_attachment_1206.pdf.initialize(extension="pdf")
		if done:
			___fee_waiver_pdf_1042_attachment_1206.pdf.from_url(filled_attachment_url)
			___fee_waiver_pdf_1042_attachment_1206.info = {'name': 'fee_waiver', 'filename': 'fee_waiver', 'description': ''}
		else:
			___fee_waiver_pdf_1042_attachment_1206.pdf.from_url('https://community.lawyer/static/blank.pdf')
			___fee_waiver_pdf_1042_attachment_1206.info = {'name': 'We encountered a problem', 'filename': 'fee_waiver', 'description': 'There was a problem filling your Pdf - please try again'}
	else:
		___fee_waiver_pdf_1042_attachment_1206 = ''
---
code: |
	if True:
		import requests
		import json
		import time
		template_id = 1041
		access_key = '1CmHThudZv'
		drawn_variables = {}
		post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables }
		fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
		task_id = fill_response.get('task_id')
		filled_attachment_url = ""
		done = False
		pdf_attempts = 0
		while not done and pdf_attempts < 250:
			task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
			done = task_response.get('status') == 'done'
			filled_attachment_url = task_response.get('document')
			pdf_attempts += 1
			time.sleep(.2)
		___gender_change_pdf_1041_attachment_1205 = DAFileCollection()
		___gender_change_pdf_1041_attachment_1205.pdf = DAFile()
		___gender_change_pdf_1041_attachment_1205.pdf.initialize(extension="pdf")
		if done:
			___gender_change_pdf_1041_attachment_1205.pdf.from_url(filled_attachment_url)
			___gender_change_pdf_1041_attachment_1205.info = {'name': 'gender_change', 'filename': 'gender_change', 'description': ''}
		else:
			___gender_change_pdf_1041_attachment_1205.pdf.from_url('https://community.lawyer/static/blank.pdf')
			___gender_change_pdf_1041_attachment_1205.info = {'name': 'We encountered a problem', 'filename': 'gender_change', 'description': 'There was a problem filling your Pdf - please try again'}
	else:
		___gender_change_pdf_1041_attachment_1205 = ''
---
code: |
	if True:
		import requests
		import json
		import time
		template_id = 1040
		access_key = 'dLilWy7iPq'
		drawn_variables = {}
		post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables }
		fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
		task_id = fill_response.get('task_id')
		filled_attachment_url = ""
		done = False
		pdf_attempts = 0
		while not done and pdf_attempts < 250:
			task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
			done = task_response.get('status') == 'done'
			filled_attachment_url = task_response.get('document')
			pdf_attempts += 1
			time.sleep(.2)
		___name_and_gender_change_pdf_1040_attachment_1204 = DAFileCollection()
		___name_and_gender_change_pdf_1040_attachment_1204.pdf = DAFile()
		___name_and_gender_change_pdf_1040_attachment_1204.pdf.initialize(extension="pdf")
		if done:
			___name_and_gender_change_pdf_1040_attachment_1204.pdf.from_url(filled_attachment_url)
			___name_and_gender_change_pdf_1040_attachment_1204.info = {'name': 'name_and_gender_change', 'filename': 'name_and_gender_change', 'description': ''}
		else:
			___name_and_gender_change_pdf_1040_attachment_1204.pdf.from_url('https://community.lawyer/static/blank.pdf')
			___name_and_gender_change_pdf_1040_attachment_1204.info = {'name': 'We encountered a problem', 'filename': 'name_and_gender_change', 'description': 'There was a problem filling your Pdf - please try again'}
	else:
		___name_and_gender_change_pdf_1040_attachment_1204 = ''
---
code: |
	if True:
		import requests
		import json
		import time
		template_id = 1039
		access_key = 'SJEqpj1HV0'
		drawn_variables = {}
		post_data = { 'template_id': template_id, 'access_key': access_key, 'drawn_target_variables': drawn_variables }
		fill_response = requests.post('https://community.lawyer/fill', json=post_data).json()
		task_id = fill_response.get('task_id')
		filled_attachment_url = ""
		done = False
		pdf_attempts = 0
		while not done and pdf_attempts < 250:
			task_response = requests.get('https://community.lawyer/tasks?task_id={0}&access_key={1}'.format(task_id, access_key)).json()
			done = task_response.get('status') == 'done'
			filled_attachment_url = task_response.get('document')
			pdf_attempts += 1
			time.sleep(.2)
		___name_change_pdf_1039_attachment_1203 = DAFileCollection()
		___name_change_pdf_1039_attachment_1203.pdf = DAFile()
		___name_change_pdf_1039_attachment_1203.pdf.initialize(extension="pdf")
		if done:
			___name_change_pdf_1039_attachment_1203.pdf.from_url(filled_attachment_url)
			___name_change_pdf_1039_attachment_1203.info = {'name': 'name_change', 'filename': 'name_change', 'description': ''}
		else:
			___name_change_pdf_1039_attachment_1203.pdf.from_url('https://community.lawyer/static/blank.pdf')
			___name_change_pdf_1039_attachment_1203.info = {'name': 'We encountered a problem', 'filename': 'name_change', 'description': 'There was a problem filling your Pdf - please try again'}
	else:
		___name_change_pdf_1039_attachment_1203 = ''
---
template: a_template_0fdf6a63ef21
subject: |
  
content: |
  
---
mandatory: |
	True
question: ''
subquestion: |
	Thank you for using this app. Your session is complete. ${___send_answers()}

under: |
	<hr/>
	Powered by [Community.lawyer](https://community.lawyer/), a public benefit company.
---
